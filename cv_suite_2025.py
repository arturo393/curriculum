#!/usr/bin/env python3
"""
CV Suite 2025 - Interfaz Unificada para Generaci√≥n de CVs
Arturo Veras Gonz√°lez
Sistema completo con mejores pr√°cticas 2025
"""

import os
import sys
import argparse
from pathlib import Path

def show_header():
    """Muestra header del sistema"""
    print("=" * 70)
    print("üöÄ CV SUITE 2025 - SISTEMA COMPLETO DE GENERACI√ìN DE CVs")
    print("   üë®‚Äçüíª Arturo Veras Gonz√°lez")
    print("   üé® Tecnolog√≠as: LaTeX, Markdown, HTML+CSS, ReportLab")
    print("   ‚≠ê A√±o: 2025 - Mejores pr√°cticas actuales")
    print("=" * 70)
    print()

def show_generators():
    """Muestra generadores disponibles"""
    generators = [
        {
            'name': 'LaTeX Cl√°sico',
            'script': 'generate_cv.py',
            'description': 'CV tradicional LaTeX (complejo pero elegante)',
            'pros': 'Tipograf√≠a profesional, control total',
            'cons': 'Requiere LaTeX, curva de aprendizaje alta',
            'emoji': 'üìú',
            'recommended': False
        },
        {
            'name': 'Markdown Simple',
            'script': 'generate_cv_simple.py',
            'description': 'CV r√°pido en Markdown ‚Üí PDF',
            'pros': 'Velocidad, simplicidad, personalizaci√≥n autom√°tica',
            'cons': 'Dise√±o limitado',
            'emoji': '‚ö°',
            'recommended': True
        },
        {
            'name': 'HTML+CSS Moderno 2025',
            'script': 'generate_cv_modern.py',
            'description': 'CV ultra-moderno con control total del dise√±o',
            'pros': 'Dise√±o 2025, ATS optimizado, control completo',
            'cons': 'Requiere weasyprint',
            'emoji': 'üé®',
            'recommended': True
        },
        {
            'name': 'ReportLab Program√°tico',
            'script': 'generate_cv_reportlab.py',
            'description': 'CV generado program√°ticamente con Python',
            'pros': 'Control program√°tico total, gr√°ficos avanzados',
            'cons': 'M√°s c√≥digo, curva de aprendizaje',
            'emoji': 'üêç',
            'recommended': False
        }
    ]
    
    print("üìä GENERADORES DISPONIBLES:")
    print()
    
    for i, gen in enumerate(generators, 1):
        rec_badge = " üåü RECOMENDADO" if gen['recommended'] else ""
        print(f"{gen['emoji']} {i}. {gen['name']}{rec_badge}")
        print(f"   üìÑ Script: {gen['script']}")
        print(f"   üí° Descripci√≥n: {gen['description']}")
        print(f"   ‚úÖ Pros: {gen['pros']}")
        print(f"   ‚ö†Ô∏è  Cons: {gen['cons']}")
        print()
    
    return generators

def check_dependencies():
    """Verifica dependencias de cada generador"""
    print("üîç VERIFICANDO DEPENDENCIAS:")
    print()
    
    # LaTeX
    latex_ok = os.system("which pdflatex > /dev/null 2>&1") == 0
    status = "‚úÖ" if latex_ok else "‚ùå"
    print(f"{status} LaTeX (pdflatex): {'Disponible' if latex_ok else 'No instalado'}")
    
    # Pandoc
    pandoc_ok = os.system("which pandoc > /dev/null 2>&1") == 0
    status = "‚úÖ" if pandoc_ok else "‚ùå"
    print(f"{status} Pandoc: {'Disponible' if pandoc_ok else 'No instalado'}")
    
    # Python packages
    packages = ['weasyprint', 'jinja2', 'reportlab', 'matplotlib']
    for package in packages:
        try:
            __import__(package)
            print(f"‚úÖ Python {package}: Disponible")
        except ImportError:
            print(f"‚ùå Python {package}: No instalado")
    
    print()
    
    # Recomendaciones
    print("üí° RECOMENDACIONES:")
    if not pandoc_ok:
        print("   üì¶ Instalar Pandoc: brew install pandoc")
    
    missing_packages = []
    for package in packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"   üêç Instalar Python packages: pip install {' '.join(missing_packages)}")
    
    print()

def run_generator(script_name, company, position, job_description=""):
    """Ejecuta un generador espec√≠fico"""
    script_path = Path(__file__).parent / script_name
    
    if not script_path.exists():
        print(f"‚ùå Error: {script_name} no encontrado")
        return False
    
    # Comandos espec√≠ficos por generador
    if script_name == "generate_cv_simple.py":
        cmd = f'python3 "{script_path}" "{company}" "{position}"'
        if job_description:
            # Para Markdown, podemos pasar la descripci√≥n como argumento adicional
            import tempfile
            with tempfile.NamedTemporaryFile(mode='w', suffix='.txt', delete=False) as f:
                f.write(job_description)
                temp_file = f.name
            cmd += f' --job-description "{temp_file}"'
    
    elif script_name == "generate_cv_modern.py":
        cmd = f'python3 "{script_path}" "{company}" "{position}"'
    
    elif script_name == "generate_cv_reportlab.py":
        cmd = f'python3 "{script_path}" "{company}" "{position}"'
    
    elif script_name == "generate_cv.py":
        cmd = f'python3 "{script_path}" "{company}" "{position}"'
    
    else:
        cmd = f'python3 "{script_path}" "{company}" "{position}"'
    
    print(f"üöÄ Ejecutando: {cmd}")
    print()
    
    result = os.system(cmd)
    return result == 0

def interactive_mode():
    """Modo interactivo para seleccionar opciones"""
    show_header()
    generators = show_generators()
    check_dependencies()
    
    # Selecci√≥n de generador
    while True:
        try:
            choice = input(f"üéØ Selecciona un generador (1-{len(generators)}) o 'q' para salir: ").strip()
            
            if choice.lower() == 'q':
                print("üëã ¬°Hasta luego!")
                return
            
            choice_num = int(choice)
            if 1 <= choice_num <= len(generators):
                selected_gen = generators[choice_num - 1]
                break
            else:
                print(f"‚ùå Selecci√≥n inv√°lida. Usa 1-{len(generators)}")
        except ValueError:
            print("‚ùå Por favor ingresa un n√∫mero v√°lido")
    
    print(f"\nüé® Generador seleccionado: {selected_gen['name']}")
    if selected_gen['recommended']:
        print("üåü ¬°Excelente elecci√≥n! Este es uno de nuestros generadores recomendados para 2025.")
    print()
    
    # Obtener informaci√≥n del trabajo
    company = input("üè¢ Nombre de la empresa: ").strip()
    position = input("üíº Posici√≥n/Cargo: ").strip()
    
    job_description = ""
    if input("\nüìù ¬øTienes descripci√≥n del trabajo para personalizar? (y/n): ").strip().lower() == 'y':
        print("üìÑ Pega la descripci√≥n del trabajo (presiona Enter dos veces para terminar):")
        lines = []
        while True:
            line = input()
            if line == "":
                break
            lines.append(line)
        job_description = "\n".join(lines)
    
    print(f"\nüöÄ Generando CV con {selected_gen['name']}...")
    print(f"   üè¢ Empresa: {company}")
    print(f"   üíº Posici√≥n: {position}")
    if job_description:
        print(f"   üìù Personalizaci√≥n: Activada ({len(job_description)} caracteres)")
    print()
    
    # Ejecutar generador
    success = run_generator(selected_gen['script'], company, position, job_description)
    
    if success:
        print("üéâ ¬°CV generado exitosamente!")
        print("üí° Tip: Revisa el archivo PDF generado y personaliza seg√∫n necesites.")
    else:
        print("‚ùå Error generando CV")
        print("üí° Tip: Verifica que todas las dependencias est√©n instaladas.")

def quick_mode(generator_type, company, position, job_description=""):
    """Modo r√°pido con par√°metros de l√≠nea de comandos"""
    generator_map = {
        'latex': 'generate_cv.py',
        'markdown': 'generate_cv_simple.py', 
        'modern': 'generate_cv_modern.py',
        'reportlab': 'generate_cv_reportlab.py'
    }
    
    if generator_type not in generator_map:
        print(f"‚ùå Tipo de generador inv√°lido: {generator_type}")
        print(f"   Tipos disponibles: {', '.join(generator_map.keys())}")
        return False
    
    script_name = generator_map[generator_type]
    
    show_header()
    print(f"üé® Generador: {generator_type.title()}")
    print(f"üè¢ Empresa: {company}")
    print(f"üíº Posici√≥n: {position}")
    if generator_type in ['markdown', 'modern']:
        print("üåü ¬°Excelente elecci√≥n para 2025!")
    print()
    
    return run_generator(script_name, company, position, job_description)

def show_recommendations():
    """Muestra recomendaciones espec√≠ficas para 2025"""
    print("üéØ RECOMENDACIONES CV 2025:")
    print()
    print("1. üé® Para m√°ximo control visual: HTML+CSS Moderno")
    print("   - Dise√±o 2025 actualizado")
    print("   - ATS-friendly")
    print("   - Personalizaci√≥n autom√°tica por industria")
    print()
    print("2. ‚ö° Para velocidad y simplicidad: Markdown Simple")
    print("   - Generaci√≥n r√°pida")
    print("   - Personalizaci√≥n autom√°tica")
    print("   - Ideal para aplicaciones m√∫ltiples")
    print()
    print("3. üìú Para roles acad√©micos/formales: LaTeX Cl√°sico")
    print("   - Tipograf√≠a profesional")
    print("   - Ideal para investigaci√≥n/academia")
    print("   - Requiere configuraci√≥n t√©cnica")
    print()

def main():
    parser = argparse.ArgumentParser(
        description="CV Suite 2025 - Sistema completo de generaci√≥n de CVs",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
üéØ EJEMPLOS DE USO:

Modo interactivo (recomendado para nuevos usuarios):
  python cv_suite_2025.py

Modo r√°pido:
  python cv_suite_2025.py --type modern "AVOS Tech" "Ingeniero IoT"
  python cv_suite_2025.py --type markdown "Google" "Software Engineer"
  python cv_suite_2025.py --type latex "Microsoft" "Technical Lead"
  python cv_suite_2025.py --type reportlab "Startup" "CTO"

Ver recomendaciones:
  python cv_suite_2025.py --recommendations

Tipos disponibles: latex, markdown, modern, reportlab

üöÄ RECOMENDACI√ìN 2025: 
   - Para m√°ximo control: 'modern' 
   - Para velocidad: 'markdown'
        """
    )
    
    parser.add_argument("company", nargs="?", help="Nombre de la empresa")
    parser.add_argument("position", nargs="?", help="Posici√≥n/cargo")
    parser.add_argument("--type", "-t", choices=['latex', 'markdown', 'modern', 'reportlab'],
                       help="Tipo de generador")
    parser.add_argument("--job-description", "-j", 
                       help="Archivo con descripci√≥n del trabajo para personalizaci√≥n")
    parser.add_argument("--recommendations", action="store_true",
                       help="Mostrar recomendaciones para 2025")
    
    args = parser.parse_args()
    
    # Mostrar recomendaciones
    if args.recommendations:
        show_header()
        show_recommendations()
        return
    
    # Modo interactivo si no se proporcionan argumentos
    if not args.company or not args.position or not args.type:
        interactive_mode()
        return
    
    # Cargar descripci√≥n del trabajo si se proporciona
    job_description = ""
    if args.job_description and os.path.exists(args.job_description):
        with open(args.job_description, 'r', encoding='utf-8') as f:
            job_description = f.read()
    
    # Modo r√°pido
    success = quick_mode(args.type, args.company, args.position, job_description)
    
    if not success:
        sys.exit(1)

if __name__ == "__main__":
    main()
